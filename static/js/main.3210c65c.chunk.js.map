{"version":3,"sources":["Components/Editor.js","Components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","sendInputToPreview","bind","event","this","sendInput","target","value","className","id","onChange","React","Component","Preview","markdown_type","emptype","empTextNestingLevel","headingCount","boldCount","italicCount","strikeCount","convertIntoMarkdown","checkTypeOfEmphasizeText","markdown_arr","length","headingType","text","Val","type","key","Heading","Italic","style","textDecoration","Strike","empRegex","Bold","markdownLen","reg","console","log","test","lastIndex","match","exec","startind","endind","substring","md","chooseEmphasize","empType","regexp","prevstartind","replaceArr","pop","markdownEliminatedText","join","regex","heading","emphasizeText","alphanumeric","JSX","matchedPattern","sentences","input","split","forEach","push","checkMarkdownType","finder","concat","setHeading","checkHeadingType","checkHeadingText","overflow","App","state","getInputFromEditor","setState","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3210c65c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Editor.css\";\r\n\r\nexport class Editor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.sendInputToPreview = this.sendInputToPreview.bind(this);\r\n  }\r\n\r\n  sendInputToPreview(event) {\r\n    this.props.sendInput(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Editor\">\r\n        <header className=\"editor-header\">\r\n          <i className=\"fa fa-free-code-camp\"></i>\r\n          <h3>Editor</h3>\r\n          <button id=\"expand\">Expand</button>\r\n        </header>\r\n        <textarea id=\"editor\" onChange={this.sendInputToPreview}></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"../css/Preview.css\";\r\n\r\nfunction Heading(props) {\r\n  const Val = `h${props.type}`;\r\n  return (\r\n    <Val key={props.headingCount}>\r\n      {props.text}\r\n      <hr />\r\n    </Val>\r\n  );\r\n}\r\n\r\nfunction Bold(props) {\r\n  return <b key={props.boldCount}>{props.text}</b>;\r\n}\r\n\r\nfunction Italic(props) {\r\n  return <i key={props.italicCount}>{props.text}</i>;\r\n}\r\n\r\nfunction Strike(props) {\r\n  return (\r\n    <span style={{ textDecoration: \"line-through\" }} key={props.strikeCount}>\r\n      {props.text}\r\n    </span>\r\n  );\r\n}\r\n\r\nexport class Preview extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.markdown_type = \"\";\r\n    this.emptype = \"\";\r\n    this.empTextNestingLevel = 1;\r\n    this.headingCount = 0;\r\n    this.boldCount = 0;\r\n    this.italicCount = 0;\r\n    this.strikeCount = 0;\r\n    this.convertIntoMarkdown = this.convertIntoMarkdown.bind(this);\r\n    this.checkTypeOfEmphasizeText = this.checkTypeOfEmphasizeText.bind(this);\r\n  }\r\n\r\n  checkHeadingType(markdown_arr) {\r\n    return markdown_arr[1].length - 1;\r\n  }\r\n\r\n  checkHeadingText(markdown_arr) {\r\n    return markdown_arr[2];\r\n  }\r\n\r\n  setHeading(headingType, text) {\r\n    return Heading({\r\n      type: headingType,\r\n      text: text,\r\n      headingCount: this.headingCount,\r\n    });\r\n  }\r\n\r\n  chooseEmphasize(type, text) {\r\n    switch (type) {\r\n      case \"Bold\":\r\n        this.boldCount++;\r\n        return Bold({\r\n          text: text,\r\n          boldCount: this.boldCount,\r\n        });\r\n      case \"Italic\":\r\n        this.italicCount++;\r\n        return Italic({\r\n          text: text,\r\n          italicCount: this.italicCount,\r\n        });\r\n      case \"Strike\":\r\n        this.strikeCount++;\r\n        return Strike({\r\n          text: text,\r\n          strikeCount: this.strikeCount,\r\n        });\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n\r\n  checkTypeOfEmphasizeText(value) {\r\n    const empRegex = {\r\n      Bold: /(\\*\\*)([^**]*)(\\*\\*)/g,\r\n      Italic: /(_)([^_]*)(_)/g,\r\n      Strike: /(~~)([^~~]*)(~~)/g,\r\n    };\r\n\r\n    const markdownLen = {\r\n      Bold: 2,\r\n      Italic: 1,\r\n      Strike: 2,\r\n    };\r\n\r\n    console.log(value);\r\n    for (const reg in empRegex) {\r\n      if (empRegex[reg].test(value)) {\r\n        empRegex[reg].lastIndex = 0;\r\n        let match = empRegex[reg].exec(value);\r\n        let startind = empRegex[reg].lastIndex - match[0].length;\r\n        let endind = empRegex[reg].lastIndex - 1;\r\n        this.emptype = reg;\r\n        this.empTextNestingLevel++;\r\n        this.checkTypeOfEmphasizeText(\r\n          value.substring(\r\n            startind + markdownLen[reg],\r\n            endind - markdownLen[reg] + 1\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    let type = this.emptype;\r\n    let md = this.chooseEmphasize(type, value);\r\n    this.empTextNestingLevel--;\r\n    return {\r\n      empType: type,\r\n      type: md,\r\n    };\r\n  }\r\n\r\n  emphasizeText(text, regexp, type = \"\") {\r\n    let match = regexp.exec(text);\r\n    let prevstartind = 0;\r\n    let replaceArr = [];\r\n    /*const markdownLen = {\r\n      Bold: 2,\r\n      Italic: 1,\r\n      Strike: 2,\r\n    };*/\r\n\r\n    while (match !== null) {\r\n      let startind = regexp.lastIndex - match[0].length;\r\n      let endind = regexp.lastIndex - 1;\r\n      console.log(startind, endind);\r\n      if (replaceArr !== []) {\r\n        replaceArr.pop();\r\n      }\r\n      type = this.checkTypeOfEmphasizeText(\r\n        text.substring(startind, endind + 1)\r\n      );\r\n      replaceArr = [\r\n        ...replaceArr,\r\n        text.substring(prevstartind, startind),\r\n        type[type[\"empType\"]],\r\n        text.substring(endind + 1, text.length),\r\n      ];\r\n      prevstartind = endind + 1;\r\n      match = regexp.exec(text);\r\n    }\r\n    return {\r\n      replaceArr: replaceArr,\r\n      markdownEliminatedText: replaceArr.join(\"\"),\r\n    };\r\n  }\r\n\r\n  // Checking for suitable patterns matching a sentence here.\r\n  checkMarkdownType(value) {\r\n    const regex = {\r\n      heading: /^(#+ )(.*)\\n$/,\r\n      emphasizeText: /((\\*\\*)([^**]*)(\\*\\*))|((_)([^_]*)(_))|((~~)([^~~]*)(~~))/g,\r\n      alphanumeric: /^([\\w*\\s*])*\\n$/,\r\n    };\r\n\r\n    for (const reg in regex) {\r\n      if (regex[reg].test(value)) {\r\n        /*markdown_arr = markdown_arr.concat(value.match(regex[reg]).slice(1));\r\n        console.log(markdown_arr, value.match(regex[reg]), reg);*/\r\n        this.markdown_type = reg;\r\n        return regex[reg];\r\n      }\r\n    }\r\n    this.markdown_type = \"\";\r\n    return /.*/;\r\n  }\r\n\r\n  convertIntoMarkdown() {\r\n    let JSX = [],\r\n      markdown_arr = [],\r\n      matchedPattern = /.*/;\r\n    let sentences = this.props.input.split(\"\\n\");\r\n    let replaceArr = [];\r\n    /*const regex = {\r\n      heading: /^(#+ )(.*)\\n$/,\r\n      alphanumeric: /^([\\w*\\s*]+)\\n$/,\r\n      bold: /(\\*\\*)([^**]*)(\\*\\*)/g,\r\n      italic: /(_)([^_]*)(_)/g,\r\n      strike: /(~~)([^~~]*)(~~)/g,\r\n    };*/\r\n\r\n    // Looping through sentences and finding patterns for markdown.\r\n    sentences.forEach((value) => {\r\n      value += value[value.length - 1] === \"\\n\" ? \"\" : \"\\n\";\r\n      if (value === \"\\n\") {\r\n        JSX.push(value);\r\n      }\r\n\r\n      // This array contains all the capture groups for the patterns matched\r\n      // on the sentence.\r\n      //markdown_arr = this.checkForPatterns(value);\r\n      else {\r\n        matchedPattern = this.checkMarkdownType(value);\r\n        let finder = value.match(matchedPattern);\r\n        markdown_arr = markdown_arr.concat(finder);\r\n        //console.log(this.markdown_type, markdown_arr);\r\n        if (markdown_arr.length > 0 && finder != null) {\r\n          switch (this.markdown_type) {\r\n            case \"heading\":\r\n              this.headingCount += 1;\r\n              JSX.push(\r\n                this.setHeading(\r\n                  this.checkHeadingType(markdown_arr),\r\n                  this.checkHeadingText(markdown_arr)\r\n                )\r\n              );\r\n              break;\r\n            case \"alphanumeric\":\r\n              console.log(JSX);\r\n              JSX.push(value);\r\n              break;\r\n            case \"emphasizeText\":\r\n              replaceArr = this.emphasizeText(value, matchedPattern);\r\n              JSX.push(replaceArr[\"replaceArr\"]);\r\n              break;\r\n            default:\r\n              JSX.push(value);\r\n              break;\r\n          }\r\n        } else {\r\n          // This condition is handy in case no patterns are matched in which case we do not have any md type.\r\n          if (this.props.input !== \"\") {\r\n            JSX = [...JSX, value];\r\n          }\r\n        }\r\n        markdown_arr = [];\r\n      }\r\n\r\n      // Here, we are checking for type of markdown\r\n      // so that we can render component based on it.\r\n    });\r\n    return JSX;\r\n  }\r\n\r\n  render() {\r\n    let JSX = this.convertIntoMarkdown();\r\n    return (\r\n      <div className=\"Preview\">\r\n        <header className=\"preview-header\">\r\n          <i className=\"fa fa-free-code-camp\"></i>\r\n          <h3>Preview</h3>\r\n          <button id=\"expand\">Expand</button>\r\n        </header>\r\n        <pre id=\"preview\" style={{ overflow: \"scroll\" }}>\r\n          {JSX}\r\n        </pre>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Editor } from \"./Components/Editor\";\nimport { Preview } from \"./Components/Preview\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n    };\n    this.getInputFromEditor = this.getInputFromEditor.bind(this);\n  }\n\n  getInputFromEditor(value) {\n    this.setState({\n      input: value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor sendInput={this.getInputFromEditor} />\n        <Preview input={this.state.input} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}