{"version":3,"sources":["Components/Input.js","Components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","this","visible","id","onClick","maximize","rows","cols","onChange","setInput","initValue","React","Component","Preview","marked","setOptions","breaks","dangerouslySetInnerHTML","__html","prvw_input","App","initText","state","input","showComponent","bind","event","visibleComp","target","substring","length","setState","value","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kTAmBeA,E,kDAfX,WAAYC,GAAQ,uCACVA,G,0CAGV,WACA,MAA8B,WAAvBC,KAAKD,MAAME,SAA+C,SAAvBD,KAAKD,MAAME,QAAsB,sBAAKC,GAAG,QAAR,UACvE,sBAAKA,GAAG,SAAR,UACI,mBAAGA,GAAG,UAAN,oBACA,wBAAQA,GAAG,YAAYC,QAASH,KAAKD,MAAMK,SAA3C,wBAER,0BAAUF,GAAG,SAASG,KAAK,KAAKC,KAAK,KAAKC,SAAUP,KAAKD,MAAMS,SAA/D,SAA0ER,KAAKD,MAAMU,eACzE,4B,GAZIC,IAAMC,W,gBCsBXC,G,wDApBX,WAAYb,GAAQ,uCACVA,G,0CAGV,WAKI,OAJAc,IAAOC,WAAW,CACdC,QAAQ,IAGkB,YAAvBf,KAAKD,MAAME,SAAgD,SAAvBD,KAAKD,MAAME,QAAsB,sBAAKC,GAAG,UAAR,UACvE,sBAAKA,GAAG,SAAR,UACD,mBAAGA,GAAG,UAAN,qBACA,wBAAQA,GAAG,aAAaC,QAASH,KAAKD,MAAMK,SAA5C,wBAEA,qBAAKF,GAAG,UAAUc,wBAAyB,CAACC,OAAOJ,IAAOb,KAAKD,MAAMmB,kBAE9D,4B,GAjBGR,IAAMC,YC6FbQ,E,kDAzFb,WAAYpB,GAAQ,IAAD,sBAEjB,IAAMqB,EAAQ,kpCAFG,OACjB,cAAMrB,IA6CDsB,MAAM,CACTC,MAAOF,EACPA,SAAUA,EACVG,cAAe,QAEjB,EAAKf,SAAW,EAAKA,SAASgB,KAAd,gBAChB,EAAKpB,SAAW,EAAKA,SAASoB,KAAd,gBApDC,E,4CAgEnB,SAASC,GACP,IAAMC,EAAcD,EAAME,OAAOzB,GAAG0B,UAAU,EAAGH,EAAME,OAAOzB,GAAG2B,OAAS,GAE1E7B,KAAK8B,SAAS,CACZP,cAAeG,M,sBAInB,SAASD,GAAqB,IAAdL,EAAa,uDAAJ,GACvBpB,KAAK8B,SAAS,CACZR,MAAiB,OAAVG,EAAiBL,EAAWK,EAAME,OAAOI,U,oBAKpD,WACA,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,CAAO/B,QAASD,KAAKqB,MAAME,cAAenB,SAAUJ,KAAKI,SAAUK,UAAWT,KAAKqB,MAAMD,SAAUZ,SAAUR,KAAKQ,WAClH,cAAC,EAAD,CAASP,QAASD,KAAKqB,MAAME,cAAenB,SAAUJ,KAAKI,SAAUc,WAAYlB,KAAKqB,MAAMC,e,GApFhFZ,IAAMC,WCKJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.95dbc4f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../scss/Input.scss';\r\n\r\nclass Input extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n    return this.props.visible === \"editor\" || this.props.visible === 'both' ? (<div id=\"Input\">\r\n        <div id=\"header\">\r\n            <p id=\"heading\">Editor</p>\r\n            <button id=\"editormax\" onClick={this.props.maximize}>Enlarge</button>\r\n        </div>\r\n    <textarea id=\"editor\" rows=\"20\" cols=\"50\" onChange={this.props.setInput}>{this.props.initValue}</textarea>\r\n    </div>)  : (<div></div>);\r\n}\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport marked from 'marked';\r\nimport '../scss/Preview.scss';\r\n\r\nclass Preview extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        marked.setOptions({\r\n            breaks: true\r\n        });\r\n        \r\n        return this.props.visible === \"preview\" || this.props.visible === 'both' ? (<div id=\"Preview\">\r\n             <div id=\"header\">\r\n            <p id=\"heading\">Preview</p>\r\n            <button id=\"previewmax\" onClick={this.props.maximize}>Enlarge</button>\r\n        </div>\r\n            <div id=\"preview\" dangerouslySetInnerHTML={{__html:marked(this.props.prvw_input)}}>\r\n                </div>\r\n        </div>) : (<div></div>);\r\n    }\r\n}\r\n\r\nexport default Preview;","import React from 'react';\r\nimport './App.css';\r\nimport Input from './Components/Input';\r\nimport Preview from './Components/Preview';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const initText = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n    \r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n    \r\n\\`\\`\\`\r\n// this is multi-line code:\r\n    \r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n    \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n    \r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n    \r\nAnd if you want to get really crazy, even tables:\r\n    \r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n    \r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n      - With different indentation levels.\r\n        - That look like this.\r\n    \r\n    \r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n    \r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n    this.state={\r\n      input: initText,\r\n      initText: initText,\r\n      showComponent: 'both',\r\n    }\r\n    this.setInput = this.setInput.bind(this);\r\n    this.maximize = this.maximize.bind(this);\r\n  }\r\n\r\n  /*componentDidMount () {\r\n    const script = document.createElement(\"script\");\r\n\r\n    script.src = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\r\n    script.async = true;\r\n\r\n    document.body.appendChild(script);\r\n}*/\r\n\r\n  maximize(event) {\r\n    const visibleComp = event.target.id.substring(0, event.target.id.length - 3);\r\n    \r\n    this.setState({\r\n      showComponent: visibleComp\r\n    })\r\n  }\r\n\r\n  setInput(event, initText=\"\") {\r\n    this.setState({\r\n      input: event === null ? initText : event.target.value\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Input visible={this.state.showComponent} maximize={this.maximize} initValue={this.state.initText} setInput={this.setInput}/>\r\n      <Preview visible={this.state.showComponent} maximize={this.maximize} prvw_input={this.state.input}/>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}